// package middleware

// import(
// 	"net/http"
// 	"github.com/golang-jwt/jwt"
// 	"fmt"
// )
// func IsAuthorized(handler http.HandlerFunc, role string) http.HandlerFunc {
// 	return func(w http.ResponseWriter, r *http.Request) {
// 		c, err := r.Cookie("token")
// 		if err != nil {
// 			if err == http.ErrNoCookie {
// 				w.WriteHeader(http.StatusUnauthorized)
// 				return
// 			}
// 			w.WriteHeader(http.StatusBadRequest)
// 			return
// 		}

// 		ts := c.Value
// 		claims := &Claims{}

// 		tkn, err := jwt.ParseWithClaims(ts, claims, func(token *jwt.Token) (interface{}, error) {
// 			return jwtKey, nil
// 		})

// 		if err != nil {
// 			if err == jwt.ErrSignatureInvalid {
// 				w.WriteHeader(http.StatusUnauthorized)
// 				return
// 			}
// 			w.WriteHeader(http.StatusBadRequest)
// 			return
// 		}

// 		if !tkn.Valid {
// 			w.WriteHeader(http.StatusUnauthorized)
// 			return
// 		}

// 		if claims.Role != role {
// 			w.WriteHeader(http.StatusForbidden)
// 			fmt.Fprintf(w, "Insufficient permissions for role: %s", claims.Role)
// 			return
// 		}

// 		handler.ServeHTTP(w, r)
// 	}
// }
